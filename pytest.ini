# ================================================================
# pytest Configuration für Web Video Downloader
# Moderne Testing-Konfiguration mit umfassenden Features
# ================================================================

[tool:pytest]

# ================================================================
# BASIC CONFIGURATION
# ================================================================

# Minimale Python-Version
minversion = 7.0

# Test-Discovery-Pattern
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# ================================================================
# OUTPUT & VERBOSITY
# ================================================================

# Verbose output mit strukturierter Anzeige
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --showlocals
    --durations=10
    --color=yes
    --code-highlight=yes

# Console output capture
console_output_style = progress

# ================================================================
# COVERAGE CONFIGURATION
# ================================================================

# Coverage-Integration
addopts = 
    --cov=video_downloader
    --cov=utilities
    --cov=cli
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --cov-config=.coveragerc

# ================================================================
# ASYNC TESTING
# ================================================================

# AsyncIO-Konfiguration für async/await-Tests
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# ================================================================
# MARKERS DEFINITION
# ================================================================

# Custom Test-Markers
markers =
    unit: Unit-Tests (schnell, isoliert, keine externen Dependencies)
    integration: Integration-Tests (langsamer, externe Services)
    performance: Performance-Tests (Benchmarking, Memory-Tests)
    security: Security-Tests (Vulnerability-Scans, Auth-Tests)
    e2e: End-to-End-Tests (vollständige User-Workflows)
    slow: Langsame Tests (> 5 Sekunden)
    network: Tests die Netzwerk-Zugriff benötigen
    docker: Tests die Docker benötigen
    vpn: Tests die VPN-Funktionalität testen
    browser: Tests die Browser-Automatisierung verwenden
    cli: CLI-Interface-Tests
    smoke: Smoke-Tests (grundlegende Funktionalität)
    regression: Regression-Tests für Bugs
    experimental: Experimentelle Features
    skip_ci: Tests die in CI übersprungen werden sollen

# ================================================================
# FILTERING & EXECUTION
# ================================================================

# Standard-Filter (ausgeschlossene Marker)
addopts = 
    -m "not slow and not performance and not experimental"

# Parallele Ausführung (wenn pytest-xdist installiert)
# addopts = -n auto

# ================================================================
# WARNINGS CONFIGURATION
# ================================================================

# Warning-Filter
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:pip._internal.*
    ignore::DeprecationWarning:setuptools.*
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*ssl.*:DeprecationWarning
    ignore:.*datetime.*:DeprecationWarning

# ================================================================
# LOGGING CONFIGURATION
# ================================================================

# Log-Level für Tests
log_level = INFO
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Log-Capture
log_capture = true
log_auto_indent = true

# ================================================================
# FIXTURES CONFIGURATION
# ================================================================

# Fixture-Scope Warnings
addopts = --strict-markers --disable-warnings

# ================================================================
# TIMEOUT CONFIGURATION (wenn pytest-timeout installiert)
# ================================================================

# Default Timeout für Tests
timeout = 300
timeout_method = thread

# ================================================================
# CUSTOM CONFIGURATION
# ================================================================

# Custom konfigurierbarer Pfad für Test-Daten
testdata_path = tests/testdata

# Environment-spezifische Konfiguration
env_file = .test.env

# ================================================================
# JUNIT XML CONFIGURATION (für CI/CD)
# ================================================================

# JUnit XML für CI-Integration
addopts = --junit-xml=test-results.xml

# ================================================================
# DOCTESTS
# ================================================================

# Doctest-Integration
addopts = --doctest-modules --doctest-continue-on-failure

# ================================================================
# BENCHMARK CONFIGURATION (wenn pytest-benchmark installiert)
# ================================================================

# Benchmark-Konfiguration
benchmark_min_rounds = 5
benchmark_max_time = 1.0
benchmark_min_time = 0.000005
benchmark_timer = time.perf_counter
benchmark_disable_gc = false
benchmark_warmup = false
benchmark_warmup_iterations = 100000
benchmark_sort = min

# ================================================================
# MOCK CONFIGURATION
# ================================================================

# Mock-Konfiguration für bessere Isolation
mock_use_standalone_module = true

# ================================================================
# CUSTOM DIRECTORIES
# ================================================================

# Cache-Directory
cache_dir = .pytest_cache

# Temporary Files
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# ================================================================
# PLUGIN CONFIGURATION
# ================================================================

# Deaktivierte Plugins (falls gewünscht)
# addopts = -p no:warnings -p no:cacheprovider

# ================================================================
# BEISPIEL FÜR ERWEITERTE KONFIGURATION
# ================================================================

# Condition-basierte Test-Ausführung
# addopts = --runxfail --lf --ff

# Memory-Profiling (wenn pytest-memray installiert)
# addopts = --memray

# HTML-Reports (wenn pytest-html installiert)
# addopts = --html=reports/report.html --self-contained-html

# ================================================================
# ENVIRONMENT-SPEZIFISCHE OVERRIDES
# ================================================================

# Diese können via Environment-Variablen überschrieben werden:
# PYTEST_ADDOPTS environment variable
# PYTEST_CURRENT_TEST für aktuellen Test-Namen

# ================================================================
# DEVELOPMENT HELPERS
# ================================================================

# Für lokale Entwicklung (kann via --override-ini überschrieben werden):
# pytest --override-ini="addopts=-v --tb=long --showlocals --durations=0"

# Für CI/CD (bereits in den Workflows konfiguriert):
# pytest --override-ini="addopts=-v --tb=short --durations=10 --cov-fail-under=85"

# Für Performance-Tests:
# pytest -m performance --benchmark-only --benchmark-json=benchmark.json

# Für Security-Tests:
# pytest -m security --tb=line

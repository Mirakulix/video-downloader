name: 🔒 Security & Vulnerability Scanning

on:
  schedule:
    # Täglich um 2:00 UTC ausführen
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'requirements*.txt'
      - 'Dockerfile*'
      - '*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'requirements*.txt'
      - 'Dockerfile*'
      - '*.py'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ================================================================
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pipenv-to-requirements pip-audit
        pip install -r requirements.txt
    
    - name: 🛡️ Safety check - Production dependencies
      run: |
        safety check --json --output safety-prod.json
        safety check --short-report
      continue-on-error: true
    
    - name: 🛡️ Safety check - Development dependencies
      run: |
        pip install -r requirements-dev.txt
        safety check --json --output safety-dev.json
        safety check --short-report
      continue-on-error: true
    
    - name: 🔍 pip-audit scan
      run: |
        pip-audit --format=json --output=pip-audit.json
        pip-audit --format=text
      continue-on-error: true
    
    - name: 📊 GitHub Advisory Database check
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt requirements-dev.txt
        summary: true
      continue-on-error: true
    
    - name: 📤 Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-*.json
          pip-audit.json

  # ================================================================
  # CODE SECURITY SCANNING
  # ================================================================
  code-security:
    name: 🔐 Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Für Semgrep
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
    
    - name: 🛡️ Bandit security scan
      run: |
        bandit -r . \
          -x tests/,venv/ \
          -f json \
          -o bandit-security-report.json
        
        bandit -r . \
          -x tests/,venv/ \
          -f txt \
          -ll -i
      continue-on-error: true
    
    - name: 🔎 Semgrep security scan
      run: |
        semgrep --config=auto \
          --json \
          --output=semgrep-security-report.json \
          --exclude=tests/ \
          --exclude=venv/ \
          .
        
        semgrep --config=auto \
          --exclude=tests/ \
          --exclude=venv/ \
          .
      continue-on-error: true
    
    - name: 🐛 CodeQL Analysis Setup
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-and-quality
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"
    
    - name: 📤 Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-security-results
        path: |
          bandit-security-report.json
          semgrep-security-report.json

  # ================================================================
  # DOCKER SECURITY SCANNING
  # ================================================================
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏗️ Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: video-downloader:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🔍 Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'video-downloader:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Trivy detailed report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'video-downloader:security-scan'
        format: 'json'
        output: 'trivy-detailed.json'
    
    - name: 🔍 Grype vulnerability scanner
      run: |
        # Install Grype
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Scan image
        grype video-downloader:security-scan -o json > grype-results.json
        grype video-downloader:security-scan -o table
      continue-on-error: true
    
    - name: 🐳 Docker Scout security scan
      uses: docker/scout-action@v1
      if: github.event_name == 'pull_request'
      with:
        command: cves
        image: video-downloader:security-scan
        only-severities: critical,high
        write-comment: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: 📤 Upload Docker security results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: 📤 Upload Docker scan artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-security-results
        path: |
          trivy-*.json
          trivy-*.sarif
          grype-results.json

  # ================================================================
  # SECRET SCANNING
  # ================================================================
  secret-scan:
    name: 🔑 Secret & Credential Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Für gitleaks historie
    
    - name: 🔍 TruffleHog OSS Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true
    
    - name: 🔑 Gitleaks secret detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true
    
    - name: 🕵️ detect-secrets scan
      run: |
        pip install detect-secrets
        
        # Initialisiere baseline falls nicht vorhanden
        if [ ! -f .secrets.baseline ]; then
          detect-secrets scan --baseline .secrets.baseline
        fi
        
        # Scanne nach neuen secrets
        detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins
        
        # Audit secrets
        detect-secrets audit .secrets.baseline --report --fail-on-unaudited
      continue-on-error: true

  # ================================================================
  # COMPLIANCE & POLICY CHECKING
  # ================================================================
  compliance:
    name: 📋 Compliance & Policy Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📋 License compliance check
      run: |
        pip install pip-licenses
        
        # Erstelle License-Report
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        pip-licenses --summary
        
        # Prüfe auf problematische Lizenzen
        pip-licenses | grep -E "(GPL|AGPL|LGPL)" || echo "No copyleft licenses found"
      continue-on-error: true
    
    - name: 🔍 SBOM (Software Bill of Materials) Generation
      run: |
        pip install cyclonedx-bom
        
        # Generiere SBOM
        cyclonedx-py -o sbom.json --format json
        cyclonedx-py -o sbom.xml --format xml
      continue-on-error: true
    
    - name: 📤 Upload compliance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-reports
        path: |
          licenses.*
          sbom.*

  # ================================================================
  # SECURITY SUMMARY REPORT
  # ================================================================
  security-summary:
    name: 📊 Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, docker-security, secret-scan, compliance]
    if: always()
    
    steps:
    - name: 📥 Download all security artifacts
      uses: actions/download-artifact@v3
    
    - name: 📊 Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## 📋 Scan Results Overview" >> security-summary.md
        echo "| Check | Status |" >> security-summary.md
        echo "|-------|--------|" >> security-summary.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
        echo "| Code Security | ${{ needs.code-security.result }} |" >> security-summary.md
        echo "| Docker Security | ${{ needs.docker-security.result }} |" >> security-summary.md
        echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> security-summary.md
        echo "| Compliance | ${{ needs.compliance.result }} |" >> security-summary.md
        echo "" >> security-summary.md
        
        # Zähle gefundene Vulnerabilities falls JSON-Files existieren
        if [ -f dependency-scan-results/safety-prod.json ]; then
          VULN_COUNT=$(jq '.vulnerabilities | length' dependency-scan-results/safety-prod.json 2>/dev/null || echo "0")
          echo "## 🛡️ Dependency Vulnerabilities: $VULN_COUNT" >> security-summary.md
        fi
        
        if [ -f docker-security-results/trivy-detailed.json ]; then
          DOCKER_VULN=$(jq '.Results[]?.Vulnerabilities // [] | length' docker-security-results/trivy-detailed.json 2>/dev/null || echo "0")
          echo "## 🐳 Docker Vulnerabilities: $DOCKER_VULN" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 🔗 Detailed Reports" >> security-summary.md
        echo "Detailed scan results are available in the GitHub Actions artifacts." >> security-summary.md
        
        cat security-summary.md
    
    - name: 📝 Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
    
    - name: 📤 Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: ❌ Fail if critical security issues found
      if: needs.dependency-scan.result == 'failure' && github.ref == 'refs/heads/main'
      run: |
        echo "❌ Critical security vulnerabilities detected in main branch!"
        echo "Please review and fix security issues before merging."
        exit 1

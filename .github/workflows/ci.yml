name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

# Concurrency: Cancel previous runs for same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ================================================================
  # CODE QUALITY & LINTING
  # ================================================================
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Für SonarCloud
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 🎨 Check code formatting (Black)
      run: |
        black --check --diff *.py tests/
    
    - name: 📋 Check import sorting (isort)
      run: |
        isort --check-only --diff *.py tests/
    
    - name: 🔍 Lint with flake8
      run: |
        flake8 *.py tests/ --statistics --tee --output-file=flake8-report.txt
    
    - name: 🏷️ Type checking (mypy)
      run: |
        mypy *.py --ignore-missing-imports --install-types --non-interactive
    
    - name: 📊 Code complexity (radon)
      run: |
        radon cc *.py --min=B
        radon mi *.py --min=B
    
    - name: 🧟 Dead code detection (vulture)
      run: |
        vulture *.py --min-confidence=90
    
    - name: 📤 Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: |
          flake8-report.txt
          .mypy_cache/

  # ================================================================
  # UNIT & INTEGRATION TESTS
  # ================================================================
  test:
    name: 🧪 Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Windows & macOS nur für neueste Python-Version (Ressourcen sparen)
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 🦊 Install Firefox (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y firefox-esr
    
    - name: 📦 Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          libnss3 \
          libnspr4 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libcups2 \
          libdrm2 \
          libxkbcommon0 \
          libatspi2.0-0 \
          libxcomposite1 \
          libxdamage1 \
          libxfixes3 \
          libxrandr2 \
          libgbm1 \
          libxss1 \
          libasound2
    
    - name: 🍺 Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg
    
    - name: 🪟 Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg -y
        # NordVPN CLI ist auf Windows nicht verfügbar, Tests überspringen
        echo "SKIP_VPN_TESTS=true" >> $env:GITHUB_ENV
    
    - name: 📚 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🎭 Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps chromium
      continue-on-error: true  # Kann auf manchen Systemen fehlschlagen
    
    - name: ⚙️ Create test configuration
      run: |
        python cli.py config --create-example
        # VPN für Tests deaktivieren
        python -c "
        import json
        with open('config.json', 'r') as f: config = json.load(f)
        config['nordvpn_enabled'] = False
        config['headless'] = True
        config['timeout'] = 10
        with open('config.json', 'w') as f: json.dump(config, f, indent=2)
        "
    
    - name: 🧪 Run unit tests
      run: |
        pytest tests/ -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --junit-xml=test-results.xml \
          --tb=short \
          -m "not performance"
      env:
        PYTEST_CURRENT_TEST: true
    
    - name: ⚡ Run performance tests (optional)
      if: github.event.inputs.run_performance_tests == 'true' || matrix.python-version == '3.11'
      run: |
        pytest tests/ -v \
          -m "performance" \
          --tb=short
      continue-on-error: true
    
    - name: 🏥 Run system diagnostics
      run: |
        python cli.py doctor
      continue-on-error: true
    
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: 📤 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml
    
    - name: 📈 Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        files: test-results.xml
        check_name: Test Results (Python ${{ matrix.python-version }})

  # ================================================================
  # SECURITY SCANNING
  # ================================================================
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
    
    - name: 🛡️ Run Bandit security scan
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json
        bandit -r . -x tests/ -f txt
      continue-on-error: true
    
    - name: 🔍 Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
    
    - name: 🔎 Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json .
        semgrep --config=auto .
      continue-on-error: true
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # ================================================================
  # DOCKER BUILD & TEST
  # ================================================================
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: video-downloader:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: 🧪 Test Docker image
      run: |
        # Teste ob Container startet
        docker run --rm video-downloader:test python --version
        docker run --rm video-downloader:test python -c "import video_downloader; print('✅ Import successful')"
        
        # Teste CLI
        docker run --rm video-downloader:test python cli.py --help
        docker run --rm video-downloader:test python cli.py doctor
    
    - name: 🔍 Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: video-downloader:test
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ================================================================
  # DOCKER COMPOSE TEST
  # ================================================================
  docker-compose:
    name: 🐙 Docker Compose Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ⚙️ Create test environment file
      run: |
        cat > .env << EOF
        POSTGRES_PASSWORD=test_password
        REDIS_PASSWORD=test_password
        EOF
    
    - name: 🚀 Start services
      run: |
        docker-compose up -d postgres redis
        sleep 10  # Warten bis Services bereit sind
    
    - name: 🏥 Health check services
      run: |
        docker-compose ps
        # Teste PostgreSQL
        docker-compose exec -T postgres pg_isready -U downloader -d video_downloader
        # Teste Redis
        docker-compose exec -T redis redis-cli ping
    
    - name: 🧪 Test application with services
      run: |
        # Baue App-Container mit Services
        docker-compose build video-downloader
        # Teste Verbindung zu Services
        docker-compose run --rm video-downloader python cli.py doctor
    
    - name: 📋 Show service logs
      if: failure()
      run: |
        docker-compose logs postgres
        docker-compose logs redis
        docker-compose logs video-downloader
    
    - name: 🛑 Stop services
      if: always()
      run: |
        docker-compose down -v

  # ================================================================
  # INTEGRATION TESTS
  # ================================================================
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [test, security]
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        playwright install chromium
        playwright install-deps chromium
    
    - name: ⚙️ Setup integration test environment
      run: |
        # Erstelle Test-Konfiguration mit Services
        python -c "
        import json
        config = {
            'sites': {},
            'output_directory': './test_downloads',
            'nordvpn_enabled': False,
            'headless': True,
            'timeout': 15,
            'concurrent_downloads': 2,
            'retry_attempts': 2,
            'log_level': 'DEBUG'
        }
        with open('integration_config.json', 'w') as f:
            json.dump(config, f, indent=2)
        "
        
        mkdir -p test_downloads
    
    - name: 🧪 Run integration tests
      run: |
        pytest tests/integration/ -v \
          --tb=long \
          --config=integration_config.json
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost/test_db
        REDIS_URL: redis://localhost:6379
    
    - name: 📤 Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test_downloads/
          *.log

  # ================================================================
  # DOCUMENTATION BUILD
  # ================================================================
  docs:
    name: 📚 Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: 🏗️ Build documentation
      run: |
        # Generiere API-Dokumentation
        python -m pydoc -w video_downloader utilities cli
        
        # Erstelle README für GitHub
        echo "# Web Video Downloader Documentation" > docs_temp.md
        echo "Auto-generated documentation build successful ✅" >> docs_temp.md
    
    - name: 📤 Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          *.html
          docs_temp.md

  # ================================================================
  # FINAL STATUS CHECK
  # ================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker, docker-compose, docs]
    if: always()
    
    steps:
    - name: 🎉 All checks passed
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success' && needs.docs.result == 'success' }}
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Code quality: ${{ needs.lint.result }}"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Docker: ${{ needs.docker.result }}"
        echo "✅ Documentation: ${{ needs.docs.result }}"
    
    - name: ❌ Some checks failed
      if: ${{ needs.lint.result != 'success' || needs.test.result != 'success' || needs.security.result != 'success' || needs.docker.result != 'success' || needs.docs.result != 'success' }}
      run: |
        echo "❌ Some CI checks failed:"
        echo "Code quality: ${{ needs.lint.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        echo "Documentation: ${{ needs.docs.result }}"
        exit 1
